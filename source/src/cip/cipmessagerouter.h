/*******************************************************************************
 * Copyright (c) 2009, Rockwell Automation, Inc.
 * All rights reserved. 
 *
 ******************************************************************************/
#ifndef CIPMESSAGEROUTER_H_
#define CIPMESSAGEROUTER_H_

#include "typedefs.h"
#include "ciptypes.h"

#define CIP_MESSAGE_ROUTER_CLASS_CODE 0x02

/*! Structure for storing the Response generated by an explict message.
 * 
 *  This buffer will be used for storing the result. The response message will be generated
 *  by assembleLinearMsg. 
 */
extern S_CIP_MR_Response gMRResponse;

/* public functions */

/*!Initialize the data structures of the message router
 */
EIP_STATUS
CIP_MessageRouter_Init(void);

/*! Free all data allocated by the classes created in the cip stack
 */
void deleteAllClasses(void);

/*! Notify the MessageRouter that an explicit message (connected or unnconnected)
 *  has been recieved. This function will be called from the encapsulation layer.
 *  The CPF strcuture is allready parsed an cann be accessed via the global variable: 
 *  g_stCPFDataItem.
 *  @param pa_pnData pointer to the data buffer of the message directly at the beginning of the CIP part.
 *  @param pa_nDataLength number of bytes in the data buffer
 *  @return  EIP_ERROR on fault
 *           EIP_OK on success           
 */
EIP_STATUS
notifyMR(EIP_UINT8 *pa_pnData, int pa_nDataLength);

/*! Register a class at the message router.
 *  In order that the message router can deliver
 *  explicit messages each class has to register.
 *  Will be automaticall done when invoking create
 *  createCIPClass.
 *  @param pa_pt2Object cip class to be registered
 *  @return EIP_OK on success
 */
EIP_STATUS
registerClass(S_CIP_Class *pa_pt2Object);

#endif /*CIPMESSAGEROUTER_H_*/
